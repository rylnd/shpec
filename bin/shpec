#!/usr/bin/env bash
VERSION=0.0.8
examples=0
failures=0
test_indent=0
red="\033[0;31m"
green="\033[0;32m"
norm="\033[0m"

indent() {
  printf '%*s' $test_indent
}

describe() {
  indent
  echo "$1"
  ((test_indent += 2))
}

end_describe() {
  ((test_indent -= 2))
  if [ $test_indent -eq 0 ]; then
    [ $failures -eq 0 ]
  fi
}

stub_command() {
  body="${2:-:}"
  eval "$1() { $body; }"
}

unstub_command() { unset -f "$1"; }

it() {
  ((examples += 1))
  assertion="$1"
}

assert() {
  case "x$1" in

  xequal )
    print_result "[[ $'$2' = $'$3' ]]" "Expected [$2] to equal [$3]";;

  xunequal )
    print_result "[[ $'$2' != $'$3' ]]" "Expected [$2] not to equal [$3]";;

  xgt )
    print_result "[[ $2 -gt $3 ]]" "Expected [$2] to be > [$3]";;

  xlt )
    print_result "[[ $2 -lt $3 ]]" "Expected [$2] to be < [$3]";;

  xmatch )
    print_result "[[ '$2' =~ $3 ]]" "Expected [$2] to match [$3]";;

  xpresent )
    print_result "[[ -n '$2' ]]" "Expected [$2] to be present";;

  xblank )
    print_result "[[ -z '$2' ]]" "Expected [$2] to be blank";;

  xfile_present )
    print_result "[[ -e $2 ]]" "Expected file [$2] to exist";;

  xfile_absent )
    print_result "[[ ! -e $2 ]]" "Expected file [$2] not to exist";;

  xsymlink )
    link="$(readlink $2)"
    print_result "[[ '$link' = '$3' ]]" "Expected [$2] to link to [$3], but got [$link]";;

  xtest )
    print_result "$2" "Expected $2 to be true";;

  * )
    if type "$1" 2>/dev/null | grep -q 'function'; then
      matcher="$1"; shift
      $matcher "$@"
    else
      print_result false "Error: Unknown matcher [$1]"
    fi;;

  esac
}

print_result() {
  indent
  if eval "$1"; then
    echo -e "$green$assertion$norm"
  else
    ((failures += 1))
    echo -e "$red$assertion"
    indent
    echo -e "($2)$norm"
  fi
}

SHPEC_ROOT=${SHPEC_ROOT:-$([[ -d './shpec' ]] && echo './shpec' || echo '.')}

case "$1" in

  -v|--version )

    echo "$VERSION";;

  * )

    matcher_files="$(find "$SHPEC_ROOT/matchers" -name '*.sh' 2>/dev/null)"

    for matcher_file in $matcher_files; do
      . "$matcher_file"
    done

    files="${@:-$(find $SHPEC_ROOT -name '*_shpec.sh')}"

    time for file in $files; do
      . "$file"
    done

    [ $failures -eq 0 ] && color=$green || color=$red
    echo -e "${color}${examples} examples, ${failures} failures${norm}"

    [ $failures -eq 0 ]

esac
